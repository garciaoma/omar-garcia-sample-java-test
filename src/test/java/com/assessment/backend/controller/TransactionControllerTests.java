package com.assessment.backend.controller;

import com.assessment.backend.BackendApplication;
import com.assessment.backend.dto.TransactionDTO;
import com.assessment.backend.dto.TransactionReportDTO;
import com.assessment.backend.dto.TransactionSumDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
        classes = BackendApplication.class
)
@AutoConfigureMockMvc
public class TransactionControllerTests {
    private static final MediaType APPLICATION_JSON_UTF8 = new MediaType(MediaType.APPLICATION_JSON.getType(), MediaType.APPLICATION_JSON.getSubtype(), Charset.forName("utf8"));

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void addTransaction() throws Exception {
        TransactionDTO transactionDTO = new TransactionDTO();
        transactionDTO.setUserId(1L);
        transactionDTO.setDescription("Automated description");
        transactionDTO.setDate((new SimpleDateFormat("yyyy-MM-dd")).parse("2020-04-01"));
        transactionDTO.setAmount(81.44);
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, false);
        ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
        String requestJson=ow.writeValueAsString(transactionDTO);

        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.post("/transaction").contentType(APPLICATION_JSON_UTF8).content(requestJson))
                .andExpect(status().is(200));

        MvcResult mvcResult = resultActions.andReturn();
        transactionDTO = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), TransactionDTO.class);

        assertNotNull(transactionDTO);
        assertEquals(1, transactionDTO.getUserId());
        assertEquals(81.44, transactionDTO.getAmount());
        assertNotNull(transactionDTO.getTransactionId());
        assertEquals("Automated description", transactionDTO.getDescription());
        assertEquals(LocalDate.parse("2020-04-01"), LocalDate.from(transactionDTO.getDate().toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime()));
    }

    @Test
    public void get() throws Exception {
        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/transaction/1/2ed1f4af-70a8-4b06-9fff-4f1b620ccca1").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().is(200));

        MvcResult mvcResult = resultActions.andReturn();
        TransactionDTO transactionDTO = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), TransactionDTO.class);

        assertNotNull(transactionDTO);
        assertEquals(1, transactionDTO.getUserId());
        assertEquals(81.44, transactionDTO.getAmount());
        assertEquals(UUID.fromString("2ed1f4af-70a8-4b06-9fff-4f1b620ccca1"), transactionDTO.getTransactionId());
        assertEquals("Autogenerated", transactionDTO.getDescription());
        assertEquals(LocalDate.parse("2020-04-01"), LocalDate.from(transactionDTO.getDate().toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime()));
    }

    @Test
    public void getAll() throws Exception {
        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/transaction/1").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().is(200));

        MvcResult mvcResult = resultActions.andReturn();
        List<TransactionDTO> list = (List<TransactionDTO>) new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), List.class);

        assertNotNull(list);
        assertFalse(list.isEmpty());
    }

    @Test
    public void sum() throws Exception {
        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/transaction/sum/2").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().is(200));

        MvcResult mvcResult = resultActions.andReturn();
        TransactionSumDTO transactionSumDTO = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), TransactionSumDTO.class);

        assertNotNull(transactionSumDTO);
        assertEquals(1651.77, transactionSumDTO.getSum());
    }

    @Test
    public void getReport() throws Exception {
        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/transaction/reporting/1").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().is(200));

        MvcResult mvcResult = resultActions.andReturn();
        List<TransactionReportDTO> transactionReportDTOList = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), List.class);

        assertNotNull(transactionReportDTOList);
    }

    @Test
    public void getRandom() throws Exception {
        ResultActions resultActions = mockMvc.perform(MockMvcRequestBuilders.get("/transaction/random").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().is(200));

        MvcResult mvcResult = resultActions.andReturn();
        TransactionDTO transactionDTO = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), TransactionDTO.class);

        assertNotNull(transactionDTO);
    }

}
